export default
/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
    (function() {
        "use strict";

        function peg$subclass(child, parent) {
            function ctor() { this.constructor = child; }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
        }

        function peg$SyntaxError(message, expected, found, location) {
            this.message  = message;
            this.expected = expected;
            this.found    = found;
            this.location = location;
            this.name     = "SyntaxError";

            if (typeof Error.captureStackTrace === "function") {
                Error.captureStackTrace(this, peg$SyntaxError);
            }
        }

        peg$subclass(peg$SyntaxError, Error);

        peg$SyntaxError.buildMessage = function(expected, found) {
            var DESCRIBE_EXPECTATION_FNS = {
                literal: function(expectation) {
                    return "\"" + literalEscape(expectation.text) + "\"";
                },

                "class": function(expectation) {
                    var escapedParts = "",
                        i;

                    for (i = 0; i < expectation.parts.length; i++) {
                        escapedParts += expectation.parts[i] instanceof Array
                            ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                            : classEscape(expectation.parts[i]);
                    }

                    return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                },

                any: function(expectation) {
                    return "any character";
                },

                end: function(expectation) {
                    return "end of input";
                },

                other: function(expectation) {
                    return expectation.description;
                }
            };

            function hex(ch) {
                return ch.charCodeAt(0).toString(16).toUpperCase();
            }

            function literalEscape(s) {
                return s
                    .replace(/\\/g, '\\\\')
                    .replace(/"/g,  '\\"')
                    .replace(/\0/g, '\\0')
                    .replace(/\t/g, '\\t')
                    .replace(/\n/g, '\\n')
                    .replace(/\r/g, '\\r')
                    .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
            }

            function classEscape(s) {
                return s
                    .replace(/\\/g, '\\\\')
                    .replace(/\]/g, '\\]')
                    .replace(/\^/g, '\\^')
                    .replace(/-/g,  '\\-')
                    .replace(/\0/g, '\\0')
                    .replace(/\t/g, '\\t')
                    .replace(/\n/g, '\\n')
                    .replace(/\r/g, '\\r')
                    .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
            }

            function describeExpectation(expectation) {
                return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
            }

            function describeExpected(expected) {
                var descriptions = new Array(expected.length),
                    i, j;

                for (i = 0; i < expected.length; i++) {
                    descriptions[i] = describeExpectation(expected[i]);
                }

                descriptions.sort();

                if (descriptions.length > 0) {
                    for (i = 1, j = 1; i < descriptions.length; i++) {
                        if (descriptions[i - 1] !== descriptions[i]) {
                            descriptions[j] = descriptions[i];
                            j++;
                        }
                    }
                    descriptions.length = j;
                }

                switch (descriptions.length) {
                    case 1:
                        return descriptions[0];

                    case 2:
                        return descriptions[0] + " or " + descriptions[1];

                    default:
                        return descriptions.slice(0, -1).join(", ")
                            + ", or "
                            + descriptions[descriptions.length - 1];
                }
            }

            function describeFound(found) {
                return found ? "\"" + literalEscape(found) + "\"" : "end of input";
            }

            return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };

        function peg$parse(input, options) {
            options = options !== void 0 ? options : {};

            var peg$FAILED = {},

                peg$startRuleFunctions = { start: peg$parsestart },
                peg$startRuleFunction  = peg$parsestart,

                peg$c0 = "or",
                peg$c1 = peg$literalExpectation("OR", true),
                peg$c2 = function(head, tail) {
                    var tree = {
                        type: "OR",
                        left: head
                    };

                    var node = tree;

                    for(var i = 0; i < tail.length - 1; i++) {
                        node.right = {
                            type: "OR",
                            left: tail[i][tail[i].length - 1]
                        };

                        node = node.right;
                    }

                    node.right = tail[i][tail[i].length - 1];

                    return tree;
                },
                peg$c3 = "and",
                peg$c4 = peg$literalExpectation("AND", true),
                peg$c5 = function(head, tail) {
                    var tree = {
                        type: "AND",
                        left: head
                    };

                    var node = tree;

                    for(var i = 0; i < tail.length - 1; i++) {
                        node.right = {
                            type: "AND",
                            left: tail[i][tail[i].length - 1]
                        };

                        node = node.right;
                    }

                    node.right = tail[i][tail[i].length - 1];

                    return tree;
                },
                peg$c6 = "(",
                peg$c7 = peg$literalExpectation("(", false),
                peg$c8 = ")",
                peg$c9 = peg$literalExpectation(")", false),
                peg$c10 = function(expression) { return expression },
                peg$c11 = "For ",
                peg$c12 = peg$literalExpectation("For ", false),
                peg$c13 = " Do",
                peg$c14 = peg$literalExpectation(" Do", false),
                peg$c15 = "Otherwise",
                peg$c16 = peg$literalExpectation("Otherwise", false),
                peg$c17 = function(expression, do_branch, otherwise_branch) { return {type: "FOR", expression: expression, do: do_branch, otherwise: otherwise_branch } },
                peg$c18 = " OR ",
                peg$c19 = peg$literalExpectation(" OR ", false),
                peg$c20 = function(left, right) { return { type: "OR", left: left, right: right } },
                peg$c21 = " AND ",
                peg$c22 = peg$literalExpectation(" AND ", false),
                peg$c23 = function(left, right) { return { type: "AND", left: left, right: right } },
                peg$c24 = function(middle) { return middle },
                peg$c25 = "commencement date before",
                peg$c26 = peg$literalExpectation("commencement date before", false),
                peg$c27 = "`",
                peg$c28 = peg$literalExpectation("`", false),
                peg$c29 = function(date) { return {type: "commencement date before", date: date} },
                peg$c30 = "-",
                peg$c31 = peg$literalExpectation("-", false),
                peg$c32 = function(day, mon, year) { return new Date(parseInt(year), parseInt(mon), parseInt(day)) },
                peg$c33 = "JAN",
                peg$c34 = peg$literalExpectation("JAN", false),
                peg$c35 = function() { return 0 },
                peg$c36 = "FEB",
                peg$c37 = peg$literalExpectation("FEB", false),
                peg$c38 = function() { return 1 },
                peg$c39 = "MAR",
                peg$c40 = peg$literalExpectation("MAR", false),
                peg$c41 = function() { return 2 },
                peg$c42 = "APR",
                peg$c43 = peg$literalExpectation("APR", false),
                peg$c44 = function() { return 3 },
                peg$c45 = "MAY",
                peg$c46 = peg$literalExpectation("MAY", false),
                peg$c47 = function() { return 4 },
                peg$c48 = "JUN",
                peg$c49 = peg$literalExpectation("JUN", false),
                peg$c50 = function() { return 5 },
                peg$c51 = "JUL",
                peg$c52 = peg$literalExpectation("JUL", false),
                peg$c53 = function() { return 6 },
                peg$c54 = "AUG",
                peg$c55 = peg$literalExpectation("AUG", false),
                peg$c56 = function() { return 7 },
                peg$c57 = "SEP",
                peg$c58 = peg$literalExpectation("SEP", false),
                peg$c59 = function() { return 8 },
                peg$c60 = "OCT",
                peg$c61 = peg$literalExpectation("OCT", false),
                peg$c62 = function() { return 9 },
                peg$c63 = "NOV",
                peg$c64 = peg$literalExpectation("NOV", false),
                peg$c65 = function() { return 10 },
                peg$c66 = "DEC",
                peg$c67 = peg$literalExpectation("DEC", false),
                peg$c68 = function() { return 11 },
                peg$c69 = " NOT",
                peg$c70 = peg$literalExpectation(" NOT", false),
                peg$c71 = " IN ",
                peg$c72 = peg$literalExpectation(" IN ", false),
                peg$c73 = function(variable, not, list) { return {type: "IN", list: list, variable: variable, not: !!not } },
                peg$c74 = /^[A-Z_]/,
                peg$c75 = peg$classExpectation([["A", "Z"], "_"], false, false),
                peg$c76 = function(variable) { return variable.join("") },
                peg$c77 = "{",
                peg$c78 = peg$literalExpectation("{", false),
                peg$c79 = "\r",
                peg$c80 = peg$literalExpectation("\r", false),
                peg$c81 = "\n",
                peg$c82 = peg$literalExpectation("\n", false),
                peg$c83 = /^[a-zA-Z0-9\-, "%.[\]()]/,
                peg$c84 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", ",", " ", "\"", "%", ".", "[", "]", "(", ")"], false, false),
                peg$c85 = "}",
                peg$c86 = peg$literalExpectation("}", false),
                peg$c87 = function(list) { return list.join("").split(", ") },
                peg$c88 = peg$otherExpectation("string"),
                peg$c89 = "",
                peg$c90 = "Must have passed ",
                peg$c91 = peg$literalExpectation("Must have passed ", false),
                peg$c92 = " credit points",
                peg$c93 = peg$literalExpectation(" credit points", false),
                peg$c94 = function(minCreditPoints, IW, inUnits, minGrade, levels, disciplines, unitsOwnedBy) { return {type: "MIN_CREDIT_POINTS", minCreditPoints: minCreditPoints, inUnits: inUnits, minGrade: minGrade, levels: levels, disciplines: disciplines, unitsOwnedBy: unitsOwnedBy, IW: !!IW } },
                peg$c95 = "Must have enrolled in ",
                peg$c96 = peg$literalExpectation("Must have enrolled in ", false),
                peg$c97 = function(minCreditPoints, IW) { return { type: "MIN_CREDIT_POINTS_ENROLLED", IW: !!IW, minCreditPoints: minCreditPoints } },
                peg$c98 = " in ",
                peg$c99 = peg$literalExpectation(" in ", false),
                peg$c100 = function(list) { return list },
                peg$c101 = "Permission required",
                peg$c102 = peg$literalExpectation("Permission required", false),
                peg$c103 = function() { return { type: "PERMISSION_REQUIRED" } },
                peg$c104 = " unit",
                peg$c105 = peg$literalExpectation(" unit", false),
                peg$c106 = "s",
                peg$c107 = peg$literalExpectation("s", false),
                peg$c108 = function(number, IW, list, minGrade, gradesOtherThan) { return { type: "PASSED_UNITS", number: number, list: list, gradesOtherThan: gradesOtherThan, minGrade: minGrade, IW: !!IW } },
                peg$c109 = "Must have completed ",
                peg$c110 = peg$literalExpectation("Must have completed ", false),
                peg$c111 = " units in ",
                peg$c112 = peg$literalExpectation(" units in ", false),
                peg$c113 = function(number, IW, list, minGrade) { return { type: "COMPLETED_UNITS", list: list, IW: !!IW, minGrade: minGrade } },
                peg$c114 = "Must have completed",
                peg$c115 = peg$literalExpectation("Must have completed", false),
                peg$c116 = " unit set ",
                peg$c117 = peg$literalExpectation(" unit set ", false),
                peg$c118 = function(IW, list) { return { type: "COMPLETED_UNIT_SET", list: list, IW:!!IW } },
                peg$c119 = "Must have enrolled in a",
                peg$c120 = peg$literalExpectation("Must have enrolled in a", false),
                peg$c121 = "n",
                peg$c122 = peg$literalExpectation("n", false),
                peg$c123 = " unit in ",
                peg$c124 = peg$literalExpectation(" unit in ", false),
                peg$c125 = function(IW, list) { return { type: "ENROLLED_IN_UNIT", list: list, IW:!!IW } },
                peg$c126 = "Any",
                peg$c127 = peg$literalExpectation("Any", false),
                peg$c128 = function(number) { return number },
                peg$c129 = " passed co-req",
                peg$c130 = peg$literalExpectation(" passed co-req", false),
                peg$c131 = function(number, IW, list) { return { type: "PASSED_COREQ_UNITS", number: number || 1, list: list, IW: !!IW }},
                peg$c132 = "Any co-req",
                peg$c133 = peg$literalExpectation("Any co-req", false),
                peg$c134 = function(IW, list) { return { type: "COREQ_UNITS", list: list, IW: !!IW }},
                peg$c135 = function(IW, list) { return { type: "COREQ_UNIT_SET", list: list, IW:!!IW } },
                peg$c136 = "Any ",
                peg$c137 = peg$literalExpectation("Any ", false),
                peg$c138 = " co-req units in ",
                peg$c139 = peg$literalExpectation(" co-req units in ", false),
                peg$c140 = function(number, IW, list) { return { type: "PASSED_COREQ_UNITS", list: list, number: number, IW: !!IW }},
                peg$c141 = "Must be enrolled in course type ",
                peg$c142 = peg$literalExpectation("Must be enrolled in course type ", false),
                peg$c143 = function(list, ownedBy) { return { type: "ENROLLED_IN_COURSE_TYPE", list: list, ownedBy: ownedBy } },
                peg$c144 = "Must be enrolled in course version ",
                peg$c145 = peg$literalExpectation("Must be enrolled in course version ", false),
                peg$c146 = function(list) { return { type: "ENROLLED_IN_COURSE_VERSION", list: list } },
                peg$c147 = "Must be enrolled in course owned by ",
                peg$c148 = peg$literalExpectation("Must be enrolled in course owned by ", false),
                peg$c149 = function(list) { return { type: "ENROLLED_IN_COURSE_OWNED_BY", list: list } },
                peg$c150 = " with grades other than ",
                peg$c151 = peg$literalExpectation(" with grades other than ", false),
                peg$c152 = " with grade of at least ",
                peg$c153 = peg$literalExpectation(" with grade of at least ", false),
                peg$c154 = function(list) { return list[0] },
                peg$c155 = " with mark of at least ",
                peg$c156 = peg$literalExpectation(" with mark of at least ", false),
                peg$c157 = function(grade) { return grade },
                peg$c158 = " owned by",
                peg$c159 = peg$literalExpectation(" owned by", false),
                peg$c160 = " in discipline ",
                peg$c161 = peg$literalExpectation(" in discipline ", false),
                peg$c162 = " from units owned by ",
                peg$c163 = peg$literalExpectation(" from units owned by ", false),
                peg$c164 = " at levels ",
                peg$c165 = peg$literalExpectation(" at levels ", false),
                peg$c166 = "Must have course WAM equal to or greater than ",
                peg$c167 = peg$literalExpectation("Must have course WAM equal to or greater than ", false),
                peg$c168 = function(number) { return { type: "MIN_WAM", number: number } },
                peg$c169 = "Quotas on",
                peg$c170 = peg$literalExpectation("Quotas on", false),
                peg$c171 = function() { return { type: "QUOTAS_ON" } },
                peg$c172 = "true",
                peg$c173 = peg$literalExpectation("true", false),
                peg$c174 = function() { return { type: "TRUE" } },
                peg$c175 = "Incompatible with",
                peg$c176 = peg$literalExpectation("Incompatible with", false),
                peg$c177 = " achievement in",
                peg$c178 = peg$literalExpectation(" achievement in", false),
                peg$c179 = " ",
                peg$c180 = peg$literalExpectation(" ", false),
                peg$c181 = function(IW, list) { return { type: "INCOMPATIBLE_WITH", list: list, IW: !!IW } },
                peg$c182 = "Incompatible with course version in ",
                peg$c183 = peg$literalExpectation("Incompatible with course version in ", false),
                peg$c184 = function(courseVersionList, statusList) { return { type: "INCOMPATIBLE_WITH_COURSE_VERSION", courseVersionList: courseVersionList, statusList: statusList } },
                peg$c185 = "Incompatible with enrolment in a",
                peg$c186 = peg$literalExpectation("Incompatible with enrolment in a", false),
                peg$c187 = " Unit Set from ",
                peg$c188 = peg$literalExpectation(" Unit Set from ", false),
                peg$c189 = function(IW, list) { return { type: "INCOMPATIBLE_WITH_ENROLLED_UNIT_SET", list: list, IW: !!IW } },
                peg$c190 = "Incompatible with course version org unit in ",
                peg$c191 = peg$literalExpectation("Incompatible with course version org unit in ", false),
                peg$c192 = function(list, courseStatus) { return { type: "INCOMPATIBLE_WITH_COURSE_VERSION_ORG_UNIT", list: list, courseStatus: courseStatus } },
                peg$c193 = " with course status in ",
                peg$c194 = peg$literalExpectation(" with course status in ", false),
                peg$c195 = "Unit was previously coded ",
                peg$c196 = peg$literalExpectation("Unit was previously coded ", false),
                peg$c197 = function(list) { return { type: "PREVIOUSLY_CODED", list: list }},
                peg$c198 = /^[0-9.]/,
                peg$c199 = peg$classExpectation([["0", "9"], "."], false, false),
                peg$c200 = function(digits) { return parseFloat(digits.join("")) },
                peg$c201 = "an",
                peg$c202 = peg$literalExpectation("an", false),
                peg$c203 = "a",
                peg$c204 = peg$literalExpectation("a", false),
                peg$c205 = " (I/W)",
                peg$c206 = peg$literalExpectation(" (I/W)", false),
                peg$c207 = peg$otherExpectation("whitespace"),
                peg$c208 = /^[ \t\n\r]/,
                peg$c209 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),

                peg$currPos          = 0,
                peg$savedPos         = 0,
                peg$posDetailsCache  = [{ line: 1, column: 1 }],
                peg$maxFailPos       = 0,
                peg$maxFailExpected  = [],
                peg$silentFails      = 0,

                peg$result;

            if ("startRule" in options) {
                if (!(options.startRule in peg$startRuleFunctions)) {
                    throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                }

                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
            }

            function text() {
                return input.substring(peg$savedPos, peg$currPos);
            }

            function location() {
                return peg$computeLocation(peg$savedPos, peg$currPos);
            }

            function expected(description, location) {
                location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

                throw peg$buildStructuredError(
                    [peg$otherExpectation(description)],
                    input.substring(peg$savedPos, peg$currPos),
                    location
                );
            }

            function error(message, location) {
                location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

                throw peg$buildSimpleError(message, location);
            }

            function peg$literalExpectation(text, ignoreCase) {
                return { type: "literal", text: text, ignoreCase: ignoreCase };
            }

            function peg$classExpectation(parts, inverted, ignoreCase) {
                return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
            }

            function peg$anyExpectation() {
                return { type: "any" };
            }

            function peg$endExpectation() {
                return { type: "end" };
            }

            function peg$otherExpectation(description) {
                return { type: "other", description: description };
            }

            function peg$computePosDetails(pos) {
                var details = peg$posDetailsCache[pos], p;

                if (details) {
                    return details;
                } else {
                    p = pos - 1;
                    while (!peg$posDetailsCache[p]) {
                        p--;
                    }

                    details = peg$posDetailsCache[p];
                    details = {
                        line:   details.line,
                        column: details.column
                    };

                    while (p < pos) {
                        if (input.charCodeAt(p) === 10) {
                            details.line++;
                            details.column = 1;
                        } else {
                            details.column++;
                        }

                        p++;
                    }

                    peg$posDetailsCache[pos] = details;
                    return details;
                }
            }

            function peg$computeLocation(startPos, endPos) {
                var startPosDetails = peg$computePosDetails(startPos),
                    endPosDetails   = peg$computePosDetails(endPos);

                return {
                    start: {
                        offset: startPos,
                        line:   startPosDetails.line,
                        column: startPosDetails.column
                    },
                    end: {
                        offset: endPos,
                        line:   endPosDetails.line,
                        column: endPosDetails.column
                    }
                };
            }

            function peg$fail(expected) {
                if (peg$currPos < peg$maxFailPos) { return; }

                if (peg$currPos > peg$maxFailPos) {
                    peg$maxFailPos = peg$currPos;
                    peg$maxFailExpected = [];
                }

                peg$maxFailExpected.push(expected);
            }

            function peg$buildSimpleError(message, location) {
                return new peg$SyntaxError(message, null, null, location);
            }

            function peg$buildStructuredError(expected, found, location) {
                return new peg$SyntaxError(
                    peg$SyntaxError.buildMessage(expected, found),
                    expected,
                    found,
                    location
                );
            }

            function peg$parsestart() {
                var s0;

                s0 = peg$parseexpression();

                return s0;
            }

            function peg$parseexpression() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                s1 = peg$parseand_expr();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c0) {
                            s5 = input.substr(peg$currPos, 2);
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c1); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parse_();
                                if (s7 === peg$FAILED) {
                                    s7 = null;
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseand_expr();
                                    if (s8 !== peg$FAILED) {
                                        s4 = [s4, s5, s6, s7, s8];
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            s3 = peg$currPos;
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c0) {
                                    s5 = input.substr(peg$currPos, 2);
                                    peg$currPos += 2;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c1); }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parse_();
                                        if (s7 === peg$FAILED) {
                                            s7 = null;
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseand_expr();
                                            if (s8 !== peg$FAILED) {
                                                s4 = [s4, s5, s6, s7, s8];
                                                s3 = s4;
                                            } else {
                                                peg$currPos = s3;
                                                s3 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s3;
                                            s3 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                    } else {
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c2(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseand_expr();
                }

                return s0;
            }

            function peg$parseand_expr() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                s1 = peg$parsebracket_expr();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c3) {
                            s5 = input.substr(peg$currPos, 3);
                            peg$currPos += 3;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c4); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parse_();
                                if (s7 === peg$FAILED) {
                                    s7 = null;
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parsebracket_expr();
                                    if (s8 !== peg$FAILED) {
                                        s4 = [s4, s5, s6, s7, s8];
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            s3 = peg$currPos;
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c3) {
                                    s5 = input.substr(peg$currPos, 3);
                                    peg$currPos += 3;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c4); }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parse_();
                                        if (s7 === peg$FAILED) {
                                            s7 = null;
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsebracket_expr();
                                            if (s8 !== peg$FAILED) {
                                                s4 = [s4, s5, s6, s7, s8];
                                                s3 = s4;
                                            } else {
                                                peg$currPos = s3;
                                                s3 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s3;
                                            s3 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                    } else {
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c5(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsebracket_expr();
                }

                return s0;
            }

            function peg$parsebracket_expr() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c6;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c7); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseexpression();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s3 = peg$c8;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c10(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsefor();
                }

                return s0;
            }

            function peg$parsefor() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c11) {
                    s1 = peg$c11;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsefor_or_expression();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c13) {
                            s3 = peg$c13;
                            peg$currPos += 3;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c14); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseexpression();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 9) === peg$c15) {
                                            s7 = peg$c15;
                                            peg$currPos += 9;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parseexpression();
                                                if (s9 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c17(s2, s5, s9);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsestring();
                }

                return s0;
            }

            function peg$parsefor_or_expression() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parsefor_and_expression();
                if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c18) {
                        s2 = peg$c18;
                        peg$currPos += 4;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c19); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsefor_and_expression();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c20(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsefor_and_expression();
                }

                return s0;
            }

            function peg$parsefor_and_expression() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parsefor_bracket_expression();
                if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c21) {
                        s2 = peg$c21;
                        peg$currPos += 5;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsefor_bracket_expression();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c23(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsefor_bracket_expression();
                }

                return s0;
            }

            function peg$parsefor_bracket_expression() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c6;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c7); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsefor_or_expression();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s3 = peg$c8;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c24(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsefor_commencement_date();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsefor_in();
                    }
                }

                return s0;
            }

            function peg$parsefor_commencement_date() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 24) === peg$c25) {
                    s1 = peg$c25;
                    peg$currPos += 24;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c26); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 96) {
                            s3 = peg$c27;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c28); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsedate();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 96) {
                                    s5 = peg$c27;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c29(s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsedate() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                s1 = peg$parseinteger();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                        s2 = peg$c30;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c31); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseshort_month();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 45) {
                                s4 = peg$c30;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c31); }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseinteger();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c32(s1, s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseshort_month() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c33) {
                    s1 = peg$c33;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c34); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c35();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c36) {
                        s1 = peg$c36;
                        peg$currPos += 3;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c38();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c39) {
                            s1 = peg$c39;
                            peg$currPos += 3;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c40); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c41();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 3) === peg$c42) {
                                s1 = peg$c42;
                                peg$currPos += 3;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c43); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c44();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 3) === peg$c45) {
                                    s1 = peg$c45;
                                    peg$currPos += 3;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c47();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 3) === peg$c48) {
                                        s1 = peg$c48;
                                        peg$currPos += 3;
                                    } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c49); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c50();
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 3) === peg$c51) {
                                            s1 = peg$c51;
                                            peg$currPos += 3;
                                        } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c53();
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.substr(peg$currPos, 3) === peg$c54) {
                                                s1 = peg$c54;
                                                peg$currPos += 3;
                                            } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c55); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c56();
                                            }
                                            s0 = s1;
                                            if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                if (input.substr(peg$currPos, 3) === peg$c57) {
                                                    s1 = peg$c57;
                                                    peg$currPos += 3;
                                                } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c58); }
                                                }
                                                if (s1 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c59();
                                                }
                                                s0 = s1;
                                                if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    if (input.substr(peg$currPos, 3) === peg$c60) {
                                                        s1 = peg$c60;
                                                        peg$currPos += 3;
                                                    } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c61); }
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c62();
                                                    }
                                                    s0 = s1;
                                                    if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        if (input.substr(peg$currPos, 3) === peg$c63) {
                                                            s1 = peg$c63;
                                                            peg$currPos += 3;
                                                        } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                                        }
                                                        if (s1 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c65();
                                                        }
                                                        s0 = s1;
                                                        if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            if (input.substr(peg$currPos, 3) === peg$c66) {
                                                                s1 = peg$c66;
                                                                peg$currPos += 3;
                                                            } else {
                                                                s1 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c67); }
                                                            }
                                                            if (s1 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s1 = peg$c68();
                                                            }
                                                            s0 = s1;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parsefor_in() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parsefor_variable();
                if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c69) {
                        s2 = peg$c69;
                        peg$currPos += 4;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c70); }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c71) {
                            s3 = peg$c71;
                            peg$currPos += 4;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c72); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parselist();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c73(s1, s2, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsefor_variable() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = [];
                if (peg$c74.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c75); }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c74.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c75); }
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c76(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parselist() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c77;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 13) {
                        s2 = peg$c79;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c80); }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 10) {
                            s3 = peg$c81;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c82); }
                        }
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            if (peg$c83.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c84); }
                            }
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                if (peg$c83.test(input.charAt(peg$currPos))) {
                                    s5 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c84); }
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                    s5 = peg$c85;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c86); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c87(s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsestring() {
                var s0, s1;

                peg$silentFails++;
                s0 = peg$parseminCreditPoints();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsepermissionRequired();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsepassedUnits();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsecompletedUnits();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parsecompletedUnitSet();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseenrolledInUnits();
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parsecoreqUnits();
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$parseenrolledInCourse();
                                            if (s0 === peg$FAILED) {
                                                s0 = peg$parseincompatibleWith();
                                                if (s0 === peg$FAILED) {
                                                    s0 = peg$parsepreviouslyCoded();
                                                    if (s0 === peg$FAILED) {
                                                        s0 = peg$parseWAM();
                                                        if (s0 === peg$FAILED) {
                                                            s0 = peg$parsequotasOn();
                                                            if (s0 === peg$FAILED) {
                                                                s0 = peg$parsetrue();
                                                                if (s0 === peg$FAILED) {
                                                                    s0 = peg$c89;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c88); }
                }

                return s0;
            }

            function peg$parseminCreditPoints() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 17) === peg$c90) {
                    s1 = peg$c90;
                    peg$currPos += 17;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseinteger();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseIW();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 14) === peg$c92) {
                                s4 = peg$c92;
                                peg$currPos += 14;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c93); }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseinUnits();
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parseminGrade();
                                    if (s6 === peg$FAILED) {
                                        s6 = null;
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseatLevels();
                                        if (s7 === peg$FAILED) {
                                            s7 = null;
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsedisciplines();
                                            if (s8 === peg$FAILED) {
                                                s8 = null;
                                            }
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parseunitsOwnedBy();
                                                if (s9 === peg$FAILED) {
                                                    s9 = null;
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c94(s2, s3, s5, s6, s7, s8, s9);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 22) === peg$c95) {
                        s1 = peg$c95;
                        peg$currPos += 22;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c96); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseinteger();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseIW();
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            if (s3 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 14) === peg$c92) {
                                    s4 = peg$c92;
                                    peg$currPos += 14;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c93); }
                                }
                                if (s4 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c97(s2, s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                return s0;
            }

            function peg$parseinUnits() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c98) {
                    s1 = peg$c98;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c99); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parselist();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c100(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsepermissionRequired() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 19) === peg$c101) {
                    s1 = peg$c101;
                    peg$currPos += 19;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c102); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c103();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsepassedUnits() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 17) === peg$c90) {
                    s1 = peg$c90;
                    peg$currPos += 17;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseinteger();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseIW();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c104) {
                                s4 = peg$c104;
                                peg$currPos += 5;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c105); }
                            }
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 115) {
                                    s5 = peg$c106;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                }
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c98) {
                                        s6 = peg$c98;
                                        peg$currPos += 4;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c99); }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parselist();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseminGrade();
                                            if (s8 === peg$FAILED) {
                                                s8 = null;
                                            }
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsegradesOtherThan();
                                                if (s9 === peg$FAILED) {
                                                    s9 = null;
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c108(s2, s3, s7, s8, s9);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsecompletedUnits() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 20) === peg$c109) {
                    s1 = peg$c109;
                    peg$currPos += 20;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c110); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseinteger();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseIW();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 10) === peg$c111) {
                                s4 = peg$c111;
                                peg$currPos += 10;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c112); }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parselist();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parseminGrade();
                                    if (s6 === peg$FAILED) {
                                        s6 = null;
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c113(s2, s3, s5, s6);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsecompletedUnitSet() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 19) === peg$c114) {
                    s1 = peg$c114;
                    peg$currPos += 19;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c115); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseIW();
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 10) === peg$c116) {
                            s3 = peg$c116;
                            peg$currPos += 10;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c117); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parselist();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c118(s2, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseenrolledInUnits() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 23) === peg$c119) {
                    s1 = peg$c119;
                    peg$currPos += 23;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c120); }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 110) {
                        s2 = peg$c121;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c122); }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseIW();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 9) === peg$c123) {
                                s4 = peg$c123;
                                peg$currPos += 9;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c124); }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parselist();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c125(s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsecoreqUnits() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c126) {
                    s1 = peg$c126;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c127); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseinteger();
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c128(s4);
                            s2 = s3;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 14) === peg$c129) {
                            s3 = peg$c129;
                            peg$currPos += 14;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c130); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseIW();
                            if (s4 === peg$FAILED) {
                                s4 = null;
                            }
                            if (s4 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c104) {
                                    s5 = peg$c104;
                                    peg$currPos += 5;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c105); }
                                }
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 115) {
                                        s6 = peg$c106;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                    }
                                    if (s6 === peg$FAILED) {
                                        s6 = null;
                                    }
                                    if (s6 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 4) === peg$c98) {
                                            s7 = peg$c98;
                                            peg$currPos += 4;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c99); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parselist();
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c131(s2, s4, s8);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 10) === peg$c132) {
                        s1 = peg$c132;
                        peg$currPos += 10;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c133); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseIW();
                        if (s2 === peg$FAILED) {
                            s2 = null;
                        }
                        if (s2 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 9) === peg$c123) {
                                s3 = peg$c123;
                                peg$currPos += 9;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c124); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parselist();
                                if (s4 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c134(s2, s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 10) === peg$c132) {
                            s1 = peg$c132;
                            peg$currPos += 10;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c133); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parseIW();
                            if (s2 === peg$FAILED) {
                                s2 = null;
                            }
                            if (s2 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 10) === peg$c116) {
                                    s3 = peg$c116;
                                    peg$currPos += 10;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                }
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parselist();
                                    if (s4 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c135(s2, s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 4) === peg$c136) {
                                s1 = peg$c136;
                                peg$currPos += 4;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c137); }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parseinteger();
                                if (s2 !== peg$FAILED) {
                                    s3 = peg$parseIW();
                                    if (s3 === peg$FAILED) {
                                        s3 = null;
                                    }
                                    if (s3 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 17) === peg$c138) {
                                            s4 = peg$c138;
                                            peg$currPos += 17;
                                        } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c139); }
                                        }
                                        if (s4 !== peg$FAILED) {
                                            s5 = peg$parselist();
                                            if (s5 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c140(s2, s3, s5);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseenrolledInCourse() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 32) === peg$c141) {
                    s1 = peg$c141;
                    peg$currPos += 32;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c142); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parselist();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseownedBy();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c143(s2, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 35) === peg$c144) {
                        s1 = peg$c144;
                        peg$currPos += 35;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c145); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parselist();
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c146(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 36) === peg$c147) {
                            s1 = peg$c147;
                            peg$currPos += 36;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c148); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parselist();
                            if (s2 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c149(s2);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                }

                return s0;
            }

            function peg$parsegradesOtherThan() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 24) === peg$c150) {
                    s1 = peg$c150;
                    peg$currPos += 24;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c151); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parselist();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c100(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseminGrade() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 24) === peg$c152) {
                    s1 = peg$c152;
                    peg$currPos += 24;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c153); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parselist();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c154(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 23) === peg$c155) {
                        s1 = peg$c155;
                        peg$currPos += 23;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c156); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseinteger();
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c157(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                return s0;
            }

            function peg$parseownedBy() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9) === peg$c158) {
                    s1 = peg$c158;
                    peg$currPos += 9;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c159); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parselist();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c100(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsedisciplines() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 15) === peg$c160) {
                    s1 = peg$c160;
                    peg$currPos += 15;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c161); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parselist();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c100(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseunitsOwnedBy() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 21) === peg$c162) {
                    s1 = peg$c162;
                    peg$currPos += 21;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c163); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parselist();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c100(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseatLevels() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 11) === peg$c164) {
                    s1 = peg$c164;
                    peg$currPos += 11;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c165); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parselist();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c100(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseWAM() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 46) === peg$c166) {
                    s1 = peg$c166;
                    peg$currPos += 46;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c167); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseinteger();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c168(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsequotasOn() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9) === peg$c169) {
                    s1 = peg$c169;
                    peg$currPos += 9;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c170); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c171();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsetrue() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c172) {
                    s1 = peg$c172;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c173); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c174();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseincompatibleWith() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 17) === peg$c175) {
                    s1 = peg$c175;
                    peg$currPos += 17;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c176); }
                }
                if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 15) === peg$c177) {
                        s2 = peg$c177;
                        peg$currPos += 15;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c178); }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseIW();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 32) {
                                s4 = peg$c179;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c180); }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parselist();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c181(s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 36) === peg$c182) {
                        s1 = peg$c182;
                        peg$currPos += 36;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c183); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parselist();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsecourseStatus();
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c184(s2, s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 32) === peg$c185) {
                            s1 = peg$c185;
                            peg$currPos += 32;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c186); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parseIW();
                            if (s2 === peg$FAILED) {
                                s2 = null;
                            }
                            if (s2 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 15) === peg$c187) {
                                    s3 = peg$c187;
                                    peg$currPos += 15;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c188); }
                                }
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parselist();
                                    if (s4 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c189(s2, s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 45) === peg$c190) {
                                s1 = peg$c190;
                                peg$currPos += 45;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c191); }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parselist();
                                if (s2 !== peg$FAILED) {
                                    s3 = peg$parsecourseStatus();
                                    if (s3 === peg$FAILED) {
                                        s3 = null;
                                    }
                                    if (s3 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c192(s2, s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parsecourseStatus() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 23) === peg$c193) {
                    s1 = peg$c193;
                    peg$currPos += 23;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c194); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parselist();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c100(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsepreviouslyCoded() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 26) === peg$c195) {
                    s1 = peg$c195;
                    peg$currPos += 26;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c196); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parselist();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c197(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseinteger() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = [];
                if (peg$c198.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c199); }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c198.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c199); }
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c200(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c201) {
                        s1 = peg$c201;
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c202); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c38();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 97) {
                            s1 = peg$c203;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c204); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c38();
                        }
                        s0 = s1;
                    }
                }

                return s0;
            }

            function peg$parseIW() {
                var s0;

                if (input.substr(peg$currPos, 6) === peg$c205) {
                    s0 = peg$c205;
                    peg$currPos += 6;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c206); }
                }

                return s0;
            }

            function peg$parse_() {
                var s0, s1;

                peg$silentFails++;
                s0 = [];
                if (peg$c208.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c209); }
                }
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    if (peg$c208.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c209); }
                    }
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c207); }
                }

                return s0;
            }

            peg$result = peg$startRuleFunction();

            if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                return peg$result;
            } else {
                if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                    peg$fail(peg$endExpectation());
                }

                throw peg$buildStructuredError(
                    peg$maxFailExpected,
                    peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
                    peg$maxFailPos < input.length
                        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
                );
            }
        }

        return {
            SyntaxError: peg$SyntaxError,
            parse:       peg$parse
        };
    })();
